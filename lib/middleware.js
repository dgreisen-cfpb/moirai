// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var auth, basic_auth, conf, couch_utils, iced, users, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  couch_utils = require('./couch_utils');

  basic_auth = require('basic-auth');

  auth = require('./auth/auth');

  conf = require('./config');

  users = require('./api/users');

  module.exports = {
    auth_hack: function(req, resp, next) {
      if (req.headers.cookie) {
        req.headers.cookie = req.headers.cookie.replace(/express_sess="(.*?)"/, 'express_sess=$1');
      }
      return next();
    },
    couch: function(req, resp, next) {
      var credentials, err, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      credentials = basic_auth(req);
      if (credentials && credentials.name === 'admin' && (credentials.pass = conf.COUCH_PWD)) {
        req.session.user = 'admin';
      }
      req.couch = couch_utils.nano_user(req.session.user);
      if (req.session.user === 'admin') {
        return next();
      }
      if (!req.session.user) {
        return resp.status(401).end(JSON.stringify({
          error: "unauthorized",
          msg: "You are not logged in."
        }));
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/greisend/programming/devdash/moirai/src/middleware.iced"
          });
          users.get_user(req.session.user, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return user = arguments[1];
              };
            })(),
            lineno: 27
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            return resp.status(401).end(JSON.stringify({
              error: req.session.user,
              msg: err
            }));
          }
          if (!auth.is_active_user(user)) {
            return resp.status(401).end(JSON.stringify({
              error: "unauthorized",
              msg: "You are not logged in."
            }));
          }
          return next();
        };
      })(this));
    }
  };

}).call(this);
