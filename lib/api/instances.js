// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var aws, clusters, conf, ec2, iced, instances, _, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  _ = require('underscore');

  aws = require('aws-sdk');

  conf = require('../config');

  clusters = require('./clusters');

  instances = {};

  ec2 = new aws.EC2({
    apiVersion: conf.AWS.APIVERSION,
    accessKeyId: conf.AWS.ACCESS_KEY,
    secretAccessKey: conf.AWS.SECRET_KEY,
    region: conf.AWS.REGION
  });

  instances.create_instance = function(client, opts, callback) {
    var data, err, instance_params, key, required_params, required_tags, tag_data, tag_params, tags, user_params, user_tags, value, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    instance_params = {
      InstanceType: conf.AWS.INSTANCETYPE,
      UserData: ''
    };
    required_params = {
      ImageId: conf.AWS.IMAGEID,
      MaxCount: 1,
      MinCount: 1,
      KeyName: conf.AWS.KEYNAME,
      SubnetId: conf.AWS.SUBNETID,
      SecurityGroupIds: conf.AWS.SECURITYGROUPIDS
    };
    user_params = _.pick(opts, 'InstanceType', 'UserData');
    _.extend(instance_params, user_params, required_params);
    tags = {
      Name: "AWSDEVMOIRAI",
      Application: '',
      Creator: 'default.user@example.com',
      Software: '',
      BusinessOwner: '',
      Description: ''
    };
    user_tags = _.pick(opts.tags, 'Application', 'Name');
    required_tags = {
      Domain: 'dev',
      PuppetRole: '',
      SysAdmin: 'SE',
      CreateDate: new Date().toISOString().split('T')[0]
    };
    _.extend(tags, user_tags, required_tags);
    _.pick(tags, _.identity);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "create_instance"
        });
        ec2.runInstances(instance_params, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 54
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        tag_params = {
          Resources: [data.Instances[0].InstanceId],
          Tags: (function() {
            var _results;
            _results = [];
            for (key in tags) {
              value = tags[key];
              _results.push({
                'Key': key,
                'Value': value
              });
            }
            return _results;
          })()
        };
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/opt/moirai/src/api/instances.iced",
            funcname: "create_instance"
          });
          ec2.createTags(tag_params, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return tag_data = arguments[1];
              };
            })(),
            lineno: 62
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return callback(err);
          }
          return callback(null, data);
        });
      };
    })(this));
  };

  instances.handle_create_instance = function(req, resp) {
    var all_opts, cluster_doc, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    all_opts = req.body;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "handle_create_instance"
        });
        instances.create_instance(req.couch, all_opts, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return cluster_doc = arguments[1];
            };
          })(),
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return resp.status(500).send(JSON.stringify({
            error: 'internal error',
            msg: err
          }));
        }
        return resp.status(201).send(JSON.stringify(cluster_doc));
      };
    })(this));
  };

  instances.get_instances = function(client, callback) {
    var data, err, params, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    params = {
      Filters: [
        {
          Name: 'key-name',
          Values: [conf.AWS.KEYNAME]
        }
      ]
    };
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "get_instances"
        });
        ec2.describeInstances(params, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 93
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        return callback(null, data);
      };
    })(this));
  };

  instances.handle_get_instances = function(req, resp) {
    var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "handle_get_instances"
        });
        instances.get_instances(req.couch, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 99
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return resp.status(500).send(JSON.stringify({
            error: 'internal error',
            msg: err
          }));
        }
        return resp.status(201).send(JSON.stringify(data));
      };
    })(this));
  };

  instances.handle_get_instance = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  instances.handle_update_instance = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  instances.destroy_instance = function(client, instance_id, callback) {
    var data, err, params, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    params = {
      InstanceIds: [instance_id]
    };
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "destroy_instance"
        });
        ec2.terminateInstances(params, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 114
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return callback(err);
        }
        return callback(null, data);
      };
    })(this));
  };

  instances.handle_destroy_instance = function(req, resp) {
    var data, err, instance_id, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    instance_id = req.params.instance_id;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/opt/moirai/src/api/instances.iced",
          funcname: "handle_destroy_instance"
        });
        instances.destroy_instance(req.couch, instance_id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 122
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          return resp.status(500).send(JSON.stringify({
            error: 'internal error',
            msg: 'internal error'
          }));
        }
        return resp.status(201).send(JSON.stringify(data));
      };
    })(this));
  };

  module.exports = instances;

}).call(this);
