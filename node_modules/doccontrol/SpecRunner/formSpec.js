// Generated by CoffeeScript 1.4.0

describe("widgets.Form", function() {
  beforeEach(function() {
    this.schema = {
      name: "name",
      field: "CharField",
      maxLength: 40,
      widget: {
        label: "Name"
      }
    };
    this.listSchema = {
      name: "list",
      field: "ListField",
      schema: this.schema
    };
    this.val = "hello world";
    this.listVal = ["hello", "world"];
    this.listVal2 = ["goodnight", "moon"];
    return this.form = new widgets.Form({
      schema: this.schema
    });
  });
  it("should create a widget and a field given a schema", function() {
    expect(this.form.fields instanceof fields.Field).toBe(true);
    return expect(this.form.widgets instanceof widgets.Widget).toBe(true);
  });
  it("should set widget and field parentWidget/parent to the form", function() {
    expect(this.form.fields.parent).toBe(this.form);
    return expect(this.form.widgets.parentWidget).toBe(this.form);
  });
  it("should be able to get a field by path", function() {
    return expect(this.form.getField('').name).toEqual("name");
  });
  it("should be able to get a widget by path", function() {
    return expect(this.form.getWidget('').fieldName).toEqual("name");
  });
  it("should be able to set the field value", function() {
    this.form.setValue("hello world");
    return this.expect(this.form.getValue()).toEqual("hello world");
  });
  it("should listen for value changes to the fields and send to the widgets.", function() {
    spyOn(this.form, "onFieldValueChanged").andCallThrough();
    this.form.setValue('hello world');
    return expect(this.form.onFieldValueChanged).toHaveBeenCalled();
  });
  it("should set value of both widget and field when initial value provided", function() {
    var schema;
    schema = enyo.clone(this.schema);
    this.form = new widgets.Form({
      schema: this.schema,
      value: this.val
    });
    expect(this.form.getValue()).toBe("hello world");
    return expect(this.form.widgets.getValue()).toBe("hello world");
  });
  it("should pass field errors to widget", function() {
    this.form.isValid();
    return expect(this.form.widgets.getErrors()).toEqual(['This field is required.']);
  });
  it("should listen for required changes and send to the widgets; also validate if indicated by validationStrategy", function() {
    spyOn(this.form, "onFieldRequiredChanged").andCallThrough();
    spyOn(this.form, "_validate");
    this.form.getField('').setRequired(false);
    expect(this.form.onFieldRequiredChanged).toHaveBeenCalled();
    return expect(this.form._validate).toHaveBeenCalled();
  });
  it("shouldn't auto-validate until manually validated once with defaultValidation", function() {
    expect(this.form.fields.errors).toEqual([]);
    this.form.isValid();
    expect(this.form.fields.errors).toEqual(['This field is required.']);
    this.form.setValue("hello world");
    return expect(this.form.fields.errors).toEqual([]);
  });
  it("should always auto-validate with alwaysValidation", function() {
    this.form = new widgets.Form({
      schema: this.schema,
      validationStrategy: "always",
      value: ""
    });
    expect(this.form.fields.errors).toEqual(['This field is required.']);
    this.form.setValue("hello world");
    return expect(this.form.fields.errors).toEqual([]);
  });
  it("should handle list field creation and modification properly", function() {
    var listVal2;
    this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
    expect(this.form.getValue()).toEqual(this.listVal);
    expect(this.form.getWidget("1").getValue()).toEqual("world");
    listVal2 = ["four", "items", "in", "list"];
    this.form.setValue(listVal2);
    expect(this.form.getValue()).toEqual(listVal2);
    return expect(this.form.getWidget("2").getValue()).toEqual("in");
  });
  it("should handle list item addition by widget", function() {
    this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
    expect(this.form.getValue()).toEqual(this.listVal);
    this.form.getWidget("").handleAdd();
    return expect(this.form.getWidget("")._widgets.length).toBe(3);
  });
  it("should handle list item addition by field", function() {
    this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
    expect(this.form.getValue()).toEqual(this.listVal);
    this.form.getField("").addField("new widget");
    expect(this.form.fields.getFields().length).toBe(3);
    return expect(this.form.getWidget("2").getValue()).toBe("new widget");
  });
  it("should handle list item deletion", function() {
    this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
    this.form.setValue(["the", "quick", "brown", "fox"]);
    this.form.getWidget().$.widgets.children[1].handleDelete();
    expect(this.form.getValue()).toEqual(["the", "brown", "fox"]);
    return expect(this.form.getWidget("2").getValue()).toEqual("fox");
  });
  it("should properly reset the schema when setSchema called with new schema", function() {
    this.form.setSchema(this.listSchema);
    expect(this.form._fields.length).toBe(1);
    expect(this.form._fields[0] instanceof fields.ListField).toBe(true);
    expect(this.form._widgets.length).toBe(1);
    return expect(this.form._widgets[0] instanceof widgets.ListWidget).toBe(true);
  });
  it("should completely reset the fields and widgets if setValue called with forceReset==true and no path", function() {
    this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
    spyOn(this.form, "onFieldAdded").andCallThrough();
    this.form.setValue(this.listVal2, {
      forceReset: true
    });
    expect(this.form.onFieldAdded).toHaveBeenCalled();
    return expect(this.form.getValue()).toEqual(this.listVal2);
  });
  it("shouldn't create a widget if widget=null", function() {
    this.schema.widget = null;
    this.form = new widgets.Form({
      schema: this.schema,
      value: this.val
    });
    return expect(this.form.widgets).toBeUndefined();
  });
  return it("shouldn't create a widget if the parent widget doesn't exist", function() {
    this.listSchema.widget = null;
    return this.form = new widgets.Form({
      schema: this.listSchema,
      value: this.listVal
    });
  });
});
