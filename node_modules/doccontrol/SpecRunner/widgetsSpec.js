// Generated by CoffeeScript 1.4.0

describe("genWidgetDef", function() {
  beforeEach(function() {
    this.schema = {
      name: "name",
      field: "CharField",
      maxLength: 40,
      widget: {
        label: "Name"
      }
    };
    return this.output = {
      kind: 'widgets.Widget',
      fieldName: 'name',
      field: 'CharField',
      maxLength: 40,
      label: 'Name'
    };
  });
  it("should create a widget kind definition from a schema", function() {
    var kind;
    kind = _genWidgetDef(this.schema);
    return expect(kind).toEqual(this.output);
  });
  it("should override the defualt field widget when the widget kind is defined", function() {
    var kind;
    this.schema.widget.kind = "widgets.PasswordWidget";
    this.output.kind = "widgets.PasswordWidget";
    kind = _genWidgetDef(this.schema);
    return expect(kind).toEqual(this.output);
  });
  return it("should return undefined if no widget should be created", function() {
    var kind;
    this.schema.widget = null;
    kind = _genWidgetDef(this.schema);
    return expect(kind).toEqual(void 0);
  });
});

describe("widgets", function() {
  beforeEach(function() {
    var _genWidgetDef;
    this.schema = {
      name: "name",
      field: "CharField",
      maxLength: 40,
      widget: {
        label: "Name"
      }
    };
    _genWidgetDef = widgets.Form.prototype._genWidgetDef;
    return this.widget = new widgets.Widget(_genWidgetDef(this.schema));
  });
  it("should set its value in the input", function() {
    this.widget.setValue("hello world");
    return expect(this.widget.$.input.getValue()).toBe("hello world");
  });
  it("should set input value to this.nullValue if null or undefined", function() {
    this.widget.setValue(null);
    return expect(this.widget.$.input.getValue()).toBe("");
  });
  return it("should not reset its value when render is called", function() {
    this.widget.setValue("hello world");
    this.widget.render();
    return expect(this.widget.getValue()).toBe("hello world");
  });
});

describe("widgets.ChoiceWidget", function() {
  beforeEach(function() {
    var _genWidgetDef;
    this.schema = {
      name: "label",
      field: "ChoiceField",
      choices: [['h', 'Home'], ['w', 'Work'], ['m', 'Mobile']],
      widget: {
        label: "Label",
        compact: true,
        noLabel: true,
        size: 1
      },
      inputClasses: "input-medium"
    };
    _genWidgetDef = widgets.Form.prototype._genWidgetDef;
    return this.widget = new widgets.Widget(_genWidgetDef(this.schema));
  });
  it("should set its value in the input", function() {
    this.widget.setValue("w");
    return expect(this.widget.$.input.getValue()).toBe("w");
  });
  return it("should update its value when input changes", function() {
    this.widget.$.input.setValue('w');
    return expect(this.widget.$.input.getValue()).toBe("w");
  });
});
