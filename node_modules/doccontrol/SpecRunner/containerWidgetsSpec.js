// Generated by CoffeeScript 1.4.0

describe("widgets.ContainerWidget", function() {
  beforeEach(function() {
    var _genWidgetDef;
    this.subschema = {
      field: "CharField",
      name: "sub1",
      value: "hello",
      minLength: 5
    };
    this.subschema2 = {
      field: "CharField",
      name: "sub2",
      minLength: 5
    };
    this.vals = {
      sub1: "hello",
      sub2: "moon"
    };
    this.schema = {
      field: "ContainerField",
      name: "container",
      value: this.vals
    };
    _genWidgetDef = widgets.Form.prototype._genWidgetDef;
    return this.widget = new widgets.ContainerWidget(_genWidgetDef(this.schema));
  });
  return it("should create child widget, add to _widgets, and set value and parentWidget, when addWidget", function() {
    this.widget.addWidget(this.subschema);
    expect(this.widget._widgets.length).toBe(1);
    return expect(this.widget._widgets[0].parentWidget).toBe(this.widget);
  });
});

describe("widgets.ListWidget", function() {
  beforeEach(function() {
    var _genWidgetDef;
    this.subschema = {
      field: "CharField",
      minLength: 5
    };
    this.vals = ["hello", "moon"];
    this.schema = {
      field: "ListField",
      name: "container",
      schema: this.subschema,
      value: this.vals
    };
    _genWidgetDef = widgets.Form.prototype._genWidgetDef;
    return this.widget = new widgets.ListWidget(_genWidgetDef(this.schema));
  });
  it("should create child widgets, add to _widgets, and set value and parentWidget when addWidget called", function() {
    this.subschema.value = this.vals[0];
    this.widget.addWidget(this.subschema);
    this.subschema.value = this.vals[1];
    this.widget.addWidget(this.subschema);
    expect(this.widget._widgets.length).toBe(2);
    expect(this.widget._widgets[0].parentWidget).toBe(this.widget);
    return expect(this.widget._widgets[0].value).toBe("hello");
  });
  return it("shouldn't create subwidget when the subwidget is null", function() {
    var _genWidgetDef;
    this.schema.widget = null;
    _genWidgetDef = widgets.Form.prototype._genWidgetDef;
    return this.widget = new widgets.ListWidget(_genWidgetDef(this.schema));
  });
});

describe("widget traversal", function() {
  beforeEach(function() {
    this.vals = {
      firstList: [
        {
          secondList: ["hello", "moon"]
        }
      ]
    };
    this.schema = {
      field: "ContainerField",
      name: "firstContainer",
      value: this.vals,
      schema: [
        {
          field: "ListField",
          name: "firstList",
          schema: {
            field: "ContainerField",
            name: "secondContainer",
            schema: [
              {
                field: "ListField",
                name: "secondList",
                schema: {
                  field: "CharField",
                  name: "text",
                  minLength: 5
                }
              }
            ]
          }
        }
      ]
    };
    this.form = new widgets.Form({
      schema: this.schema
    });
    return this.widget = this.form.widgets;
  });
  it("should create nested fields from nested schema", function() {
    return expect(this.widget.getValue()).toEqual(this.vals);
  });
  it("should be able to get any widget by path; path can only be an array b/c it should only be called by widgets.Form that converts strings to arrays.", function() {
    expect(this.widget.getWidget([]).fieldName).toBe("firstContainer");
    return expect(this.widget.getWidget(["firstList", 0, "secondList", 1]).getValue()).toBe("moon");
  });
  return it("should return path of any widget", function() {
    var path;
    expect(this.widget.getPath()).toEqual([]);
    path = ["firstList", 0, "secondList", 1];
    return expect(this.widget.getWidget(path).getPath()).toEqual(path);
  });
});
